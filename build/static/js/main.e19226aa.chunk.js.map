{"version":3,"sources":["component/AnotherComp.jsx","reducers/themeReducer.js","component/ChangeColor.jsx","reducers/userReducer.js","component/Login.jsx","component/Profile.jsx","App.js","common/i18next.js","reportWebVitals.js","index.js"],"names":["AnotherComp","theme","useSelector","state","value","t","useTranslation","style","color","themeSlice","createSlice","name","initialState","reducers","changeColor","action","payload","actions","ChangeColor","useState","setColor","dispatch","useDispatch","type","onChange","e","target","onClick","age","email","userSlice","login","logout","Login","Profile","user","App","changeLanguage","lng","i18n","window","localStorage","setItem","useEffect","getItem","className","use","initReactI18next","init","resources","en","translation","ru","tm","interpolation","escapeValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","userReducer","themeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e19226aa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst AnotherComp = () => {\r\n    const theme = useSelector((state) => state.theme.value);\r\n    const { t } = useTranslation();\r\n    return (\r\n        <div>\r\n            <h1 style={{ color: theme }}>{t('hello')}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnotherComp","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = \"green\";\r\nexport const themeSlice = createSlice({\r\n    name: \"theme\",\r\n    initialState: {value: initialState},\r\n    reducers: {\r\n        changeColor: (state, action)=>{\r\n            state.value = action.payload\r\n        }\r\n    }\r\n});\r\nexport const {changeColor} = themeSlice.actions;\r\nexport default themeSlice.reducer;","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { changeColor } from \"../reducers/themeReducer\";\r\n\r\nconst ChangeColor = () => {\r\n    const [color, setColor] = useState('#000000');\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div>\r\n            <input type=\"color\" value={color} onChange={e => setColor(e.target.value)} />\r\n            <button onClick={() => {\r\n                dispatch(changeColor(color))\r\n            }}>Change theme</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChangeColor","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {name: \"\", age: 0, email: \"\"};\r\nexport const userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState: {value: initialState},\r\n    reducers: {\r\n        login: (state, action)=>{\r\n            state.value = action.payload\r\n        },\r\n        logout: (state)=>{\r\n            state.value = initialState\r\n        }\r\n    }\r\n});\r\nexport const {login,logout} = userSlice.actions;\r\nexport default userSlice.reducer;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { login, logout } from \"../reducers/userReducer\";\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div>\r\n            <button onClick={() => {\r\n                dispatch(login({ name: \"Shageldi\", age: 22, email: \"some@gmail.com\" }))\r\n            }}>Login</button>\r\n            <button onClick={() => {\r\n                dispatch(logout())\r\n            }}>Logout</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Profile = () => {\r\n    const user = useSelector((state) => state.user.value);\r\n    const theme = useSelector((state) => state.theme.value)\r\n    return (\r\n        <div style={{ color: theme }}>\r\n            <h2>Profile</h2>\r\n            <p>Name: {user.name}</p>\r\n            <p>Email: {user.email}</p>\r\n            <p>Age: {user.age}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import \"./App.css\";\r\nimport AnotherComp from \"./component/AnotherComp\";\r\nimport ChangeColor from \"./component/ChangeColor\";\r\nimport Login from \"./component/Login\";\r\nimport Profile from \"./component/Profile\";\r\nimport i18n from \"i18next\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nfunction App() {\r\n  // const [isConnected, setIsConnected] = useState(socket.connected);\r\n  // const [chats, setChats] = useState([]);\r\n  // const [input,setInput]=useState('');\r\n  const {t} = useTranslation();\r\n  \r\n  useEffect(() => {\r\n    changeLanguage(window.localStorage.getItem('language'))\r\n    // function onConnect() {\r\n    //   setIsConnected(true);\r\n    // }\r\n\r\n    // function onDisconnect() {\r\n    //   setIsConnected(false);\r\n    // }\r\n\r\n    // function onChat(value) {\r\n    //   setChats(previous => [...previous, value]);\r\n    // }\r\n\r\n    // socket.on('connect', onConnect);\r\n    // socket.on('disconnect', onDisconnect);\r\n    // socket.on('onChat', onChat);\r\n\r\n    // return () => {\r\n    //   socket.off('connect', onConnect);\r\n    //   socket.off('disconnect', onDisconnect);\r\n    //   socket.off('onChat', onChat);\r\n    // };\r\n  }, []);\r\n\r\n\r\n  function changeLanguage(lng){\r\n    i18n.changeLanguage(lng);\r\n    window.localStorage.setItem('language',lng)\r\n  }\r\n\r\n  // function sendToChat(){\r\n  //   socket.emit('onChat',{\r\n  //     message: input,\r\n  //     username: 'shageldi'\r\n  //   })\r\n  // }\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={()=>changeLanguage('en')}>EN</button>\r\n      <button onClick={()=>changeLanguage('ru')}>RU</button>\r\n      <button onClick={()=>changeLanguage('tm')}>TM</button>\r\n      <AnotherComp/>\r\n      <ChangeColor/>\r\n      <Login/>\r\n      <Profile/>\r\n      <h2>{t('hello')}</h2>\r\n        {/* <h4>{isConnected?'Connected':'Disconnected'}</h4>\r\n        <input value={input} onChange={e=>setInput(e.target.value)} type={'text'} placeholder={'Chat'}/>\r\n        <button onClick={sendToChat}>Send</button>\r\n        {\r\n          chats.map((item,i)=>{\r\n            return(\r\n              <div>\r\n                <h2>Username: {item.username}</h2>\r\n                <p>Message: {item.message}</p>\r\n                <hr/>\r\n              </div>\r\n            )\r\n          })\r\n        } */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nconst resources = {\r\n    en: {\r\n        translation: {\r\n            \"hello\":\"Hello world\"\r\n        }\r\n    },\r\n    ru: {\r\n        translation: {\r\n            \"hello\":\"privet\"\r\n        }\r\n    },\r\n    tm: {\r\n        translation: {\r\n            \"hello\":\"Salam\"\r\n        }\r\n    }\r\n}\r\n\r\ni18n\r\n    .use(initReactI18next) // passes i18n down to react-i18next\r\n    .init({\r\n        resources,\r\n        lng: \"en\", // language to use, more information here: https://www.i18next.com/overview/configuration-options#languages-namespaces-resources\r\n        // you can use the i18n.changeLanguage function to change the language manually: https://www.i18next.com/overview/api#changelanguage\r\n        // if you're using a language detector, do not define the lng option\r\n        interpolation: {\r\n            escapeValue: false // react already safes from xss\r\n        }\r\n    });\r\n\r\nexport default i18n;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import App from \"./App\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport i18n from \"./common/i18next\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport themeReducer from \"./reducers/themeReducer\";\r\nimport userReducer from \"./reducers/userReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    theme: themeReducer\r\n  }\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n     <Provider store={store}>\r\n       <App />\r\n     </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}